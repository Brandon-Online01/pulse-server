import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { CreateDocDto } from './dto/create-doc.dto';
import { UpdateDocDto } from './dto/update-doc.dto';
import { Doc } from './entities/doc.entity';
import { DeepPartial, Repository } from 'typeorm';
import { extname } from 'path';
import { Storage } from '@google-cloud/storage';
import { storageConfig } from 'src/config/storage.config';

@Injectable()
export class DocsService {
  constructor(
    @InjectRepository(Doc)
    private readonly docsRepository: Repository<Doc>
  ) { }

  private bucketName = `${process.env.BUCKET_NAME}`;

  async create(createDocDto: CreateDocDto) {
    try {
      const doc = await this.docsRepository.save(createDocDto as unknown as DeepPartial<Doc>);

      if (!doc) {
        throw new Error(process.env.NOT_FOUND_MESSAGE);
      }

      const response = {
        message: process.env.SUCCESS_MESSAGE,
      }

      return response;
    } catch (error) {
      const response = {
        message: error.message,
      }

      return response;
    }
  }

  async findAll(): Promise<{ docs: Doc[] | null, message: string }> {
    try {
      const docs = await this.docsRepository.find();

      if (!docs) {
        throw new Error(process.env.NOT_FOUND_MESSAGE);
      }

      const response = {
        message: process.env.SUCCESS_MESSAGE,
        docs: docs
      }

      return response;
    } catch (error) {
      const response = {
        message: process.env.NOT_FOUND_MESSAGE,
        docs: null
      }

      return response;
    }
  }

  async findOne(ref: number): Promise<{ doc: Doc | null, message: string }> {
    try {
      const doc = await this.docsRepository.findOne({
        where: { uid: ref },
        relations: ['owner', 'branch']
      });

      if (!doc) {
        throw new Error(process.env.NOT_FOUND_MESSAGE);
      }

      const response = {
        message: process.env.SUCCESS_MESSAGE,
        doc: doc
      }

      return response;
    } catch (error) {
      const response = {
        message: process.env.NOT_FOUND_MESSAGE,
        doc: null
      }

      return response;
    }
  }


  public async docsByUser(ref: number): Promise<{ message: string, docs: Doc[] }> {
    try {
      const docs = await this.docsRepository.find({
        where: { owner: { uid: ref } }
      });

      if (!docs) {
        throw new Error(process.env.NOT_FOUND_MESSAGE);
      }

      const response = {
        message: process.env.SUCCESS_MESSAGE,
        docs
      };

      return response;
    } catch (error) {
      const response = {
        message: `could not get documents by user - ${error?.message}`,
        docs: null
      }

      return response;
    }
  }

  async update(ref: number, updateDocDto: UpdateDocDto): Promise<{ message: string }> {
    try {
      const doc = await this.docsRepository.update(ref, updateDocDto as unknown as DeepPartial<Doc>);

      if (!doc) {
        throw new Error(process.env.NOT_FOUND_MESSAGE);
      }

      const response = {
        message: process.env.SUCCESS_MESSAGE,
      }

      return response;
    } catch (error) {
      const response = {
        message: error?.message,
      }

      return response;
    }
  }

  async remove(ref: number): Promise<{ message: string }> {
    try {
      await this.docsRepository.delete(ref);

      const response = {
        message: process.env.SUCCESS_MESSAGE,
      }

      return response;
    } catch (error) {
      const response = {
        message: error?.message,
      }

      return response;
    }
  }

  async uploadToBucket(fileData: Express.Multer.File, fileName?: string): Promise<{ newFileName: string, message: string }> {
    try {
      const autoGeneratedFileName = fileName
        ? fileName
        : `${Math.random().toString(36).substring(2, 10)}${Math.round(Math.random() * 1e9)}${extname(fileData?.originalname)?.replace(' ', '')}`;

      const payLoadWithFileName = {
        ...fileData,
        filename: autoGeneratedFileName,
      };

      const storage = new Storage({
        projectId: `${process.env.PROJECT_ID}`,
        credentials: storageConfig,
      });

      const bucket = storage.bucket(this.bucketName);
      const file = bucket.file(payLoadWithFileName?.filename);

      const transportOptions = {
        resumable: false,
        metadata: {
          contentType: fileData.mimetype,
        },
      };

      const stream = file.createWriteStream(transportOptions);

      await new Promise<void>((resolve, reject) => {
        stream.on('error', (error) => {
          reject(error);
        });

        stream.on('finish', () => {
          resolve();
        });

        stream.end(payLoadWithFileName?.buffer);
      });

      const response = {
        newFileName: payLoadWithFileName?.filename,
        message: process.env.SUCCESS_MESSAGE,
      };

      return response;
    } catch (error: any) {
      console.log('error', error);

      const response = {
        newFileName: null,
        message: error.message,
      };

      return response;
    }
  }

  async deleteFromBucket(fileName: string): Promise<{ message: string }> {
    try {

      const storage = new Storage({
        projectId: `${process.env.PROJECT_ID}`,
        credentials: storageConfig,
      });

      const bucket = storage.bucket(this.bucketName);
      const file = bucket.file(fileName);

      const exists = await file.exists();

      if (exists?.[0]) {
        await file.delete();

        const response = {
          message: process.env.SUCCESS_MESSAGE,
        };

        return response;
      } else {
        const response = {
          message: process.env.NOT_FOUND_MESSAGE,
        };

        return response;
      }
    } catch (error: any) {
      const response = {
        message: error.message,
      };

      return response;
    }
  }
}
