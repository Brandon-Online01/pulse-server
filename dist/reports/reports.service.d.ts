import { ConfigService } from '@nestjs/config';
import { Repository } from 'typeorm';
import { CheckIn } from '../check-ins/entities/check-in.entity';
import { Task } from '../tasks/entities/task.entity';
import { Claim } from '../claims/entities/claim.entity';
import { Lead } from '../leads/entities/lead.entity';
import { Journal } from '../journal/entities/journal.entity';
import { User } from '../user/entities/user.entity';
import { Attendance } from '../attendance/entities/attendance.entity';
import { Organisation } from '../organisation/entities/organisation.entity';
import { Branch } from '../branch/entities/branch.entity';
import { Report } from './entities/report.entity';
import { ReportGenerationOptions, DailyUserActivityReport, LiveUserReport } from './report.types';
import { Achievement } from '../rewards/entities/achievement.entity';
import { Client } from '../clients/entities/client.entity';
import { EventEmitter2 } from 'eventemitter2';
import { CommunicationService } from '../communication/communication.service';
import { Tracking } from 'src/tracking/entities/tracking.entity';
import { LiveUserReportService } from './live-user-report.service';
export declare class ReportsService {
    private readonly configService;
    private readonly eventEmitter;
    private readonly communicationService;
    private readonly checkInRepository;
    private readonly taskRepository;
    private readonly claimRepository;
    private readonly leadRepository;
    private readonly journalRepository;
    private readonly userRepository;
    private readonly attendanceRepository;
    private readonly achievementRepository;
    private readonly reportRepository;
    private readonly organisationRepository;
    private readonly branchRepository;
    private readonly clientRepository;
    private readonly trackingRepository;
    private readonly liveUserReportService;
    private readonly currencyLocale;
    private readonly currencyCode;
    private readonly currencySymbol;
    private readonly WORK_HOURS_PER_DAY;
    private readonly MINUTES_PER_HOUR;
    constructor(configService: ConfigService, eventEmitter: EventEmitter2, communicationService: CommunicationService, checkInRepository: Repository<CheckIn>, taskRepository: Repository<Task>, claimRepository: Repository<Claim>, leadRepository: Repository<Lead>, journalRepository: Repository<Journal>, userRepository: Repository<User>, attendanceRepository: Repository<Attendance>, achievementRepository: Repository<Achievement>, reportRepository: Repository<Report>, organisationRepository: Repository<Organisation>, branchRepository: Repository<Branch>, clientRepository: Repository<Client>, trackingRepository: Repository<Tracking>, liveUserReportService: LiveUserReportService);
    generateReport(options: ReportGenerationOptions): Promise<Report>;
    handleDailyReport(payload: ReportGenerationOptions): Promise<void>;
    generateDailyUserReport(options: ReportGenerationOptions): Promise<DailyUserActivityReport>;
    private fetchAttendanceRecords;
    private fetchTasks;
    private fetchClientVisits;
    private fetchLeads;
    private fetchAchievements;
    private fetchJournals;
    private fetchUserRewards;
    private calculateAttendanceMetrics;
    private calculateWorkEfficiency;
    private getDefaultAttendanceMetrics;
    private calculateClientVisitMetrics;
    private calculateTaskMetrics;
    private calculateQuotationMetrics;
    private calculateRewardMetrics;
    private calculateJournalMetrics;
    private calculateProductivityMetrics;
    private isLateCheckIn;
    private calculateAverageTime;
    private calculateAverageCompletionTime;
    private groupBy;
    private getDaysBetween;
    private calculateAverageResponseTime;
    private calculateQualityScore;
    private countDataPoints;
    private generateReportSummary;
    private generateDailyReportSummary;
    private generateDashboardSummary;
    private calculateReportMetrics;
    private getTopPerformers;
    private calculateOrganisationOverview;
    private calculateOrganisationTrends;
    private calculateTopMetrics;
    private sendDailyReportEmail;
    private formatCurrency;
    private generateDashboardReport;
    private calculateDepartmentMetrics;
    userLiveOverview(userId: number): Promise<LiveUserReport>;
}
